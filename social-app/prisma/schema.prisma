generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) // Use uuid for unique string IDs
  username    String   @unique 
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())

  posts       Post[]
  likes       Like[]
  comments    Comment[]

  followers   Follower[] @relation("UserFollowers")
  followings  Follower[] @relation("UserFollowings")

  followRequestSent     FollowRequest[] @relation("UserFollowRequestSent")
  followRequestReceived FollowRequest[] @relation("UserFollowRequestReceived")

  blockerSent     Block[] @relation("BlockSent")
  blockerReceived  Block[] @relation("BlockReceived")

  stories Story[]
}

model Post {
  id        String   @id @default(uuid()) // Change to String and use uuid
  desc      String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments   Comment[]
  likes      Like[]
}

model Like {
  id        String   @id @default(uuid()) // Change to String and use uuid
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid()) // Change to String and use uuid
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  likes     Like[]
}

model Follower {
  id         String   @id @default(uuid()) // Change to String and use uuid
  createdAt  DateTime @default(now())

  followerId String
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ensure uniqueness of follower-following pairs
}

model FollowRequest {
  id         String   @id @default(uuid()) // Change to String and use uuid
  createdAt  DateTime @default(now())

  senderId   String
  sender     User     @relation("UserFollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User     @relation("UserFollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId]) // Ensure unique request per sender-receiver pair
}

model Block {
  id         String   @id @default(uuid()) // Change to String and use uuid
  createdAt  DateTime @default(now())

  blockerId  String
  blocker     User     @relation("BlockSent", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedId   String
  blocked     User     @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId]) // Ensure unique block per blocker-blocked pair
}

model Story {
  id        String   @id @default(uuid()) // Change to String and use uuid
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}